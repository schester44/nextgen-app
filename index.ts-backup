import express from "express";
import Debug from "debug";
import cors from "cors";
import axios from "axios";

const log = Debug("server");

import url from "url";
import crypto from "crypto";
import qs from "querystring";
import cookieParser from "cookie-parser";
import session from "express-session";
import appAuth from './auth'


import { validateHMAC } from "./auth";

const CLIENT_SECRET = "123secret";
const CLIENT_KEY = "mytestkey";

const APP_URL = "https://4b604235b205.ngrok.io";
const API_DOMAIN = "dev.local";

function isValidHmac(reqUrl) {
  // get query variables
  const { query } = url.parse(reqUrl, true);

  // extract the hmac
  const hmac = query.hmac;

  // remove the hmac from the variables
  delete query.hmac;

  // Sort params lexographically
  const sortedQuery = Object.keys(query)
    .sort((a, b) => a.localeCompare(b))
    .reduce((acc, curr) => {
      acc[curr] = query[curr];
      return acc;
    }, {});

  // convert to query string
  const queryString = qs.stringify(sortedQuery);

  // generate hmac using the client secret
  const hash = crypto
    .createHmac("sha256", CLIENT_SECRET)
    .update(queryString)
    .digest("hex");

  // compare
  // Ref: https://stackoverflow.com/questions/51486432/what-is-the-preferred-way-of-comparing-hmac-signatures-in-node
  return crypto.timingSafeEqual(
    Buffer.from(hash, "utf-8"),
    Buffer.from(hmac, "utf-8")
  );
}

const app = express();

class InMemoryAccountTokenStore {
  constructor() {
    this.store = new Map();
  }

  get(id) {
    return this.store.get(id);
  }

  save(id, token) {
    this.store.set(id, token);
  }
}

const tokens = new InMemoryAccountTokenStore();

app.use(cors());

app.set("trust proxy", true);

app.use(
  session({
    name: "app_sess",
    secret: "SUPER-SECRET-123",
    saveUninitialized: false,
    cookie: {
      httpOnly: true,
      secure: true,
      sameSite: "none",
      maxAge: 1000 * 60 * 60 * 24 * 7 * 365, // 7 years
    },
  })
);

app.get("/auth", (req, res, next) => {
  const { code, account, user } = req.query;

  if (!code) {
    log("No code was supplied to /auth");
    next(new Error("No Code supplied to /auth"));
  }

  if (!validateHMAC(req.query.hmac, CLIENT_SECRET, req.query)) {
    return next(new ForbiddenError("Invalid Hmac /auth"));
  }

  log("fetching acess_token from", `http://${account}.${API_DOMAIN}:3446`);
  log(`http://${account}.${API_DOMAIN}:3446`);

  axios
    .post(`http://${account}.${API_DOMAIN}:3446/apps/oauth/access_token`, {
      code,
      client_id: CLIENT_KEY,
      client_secret: CLIENT_SECRET,
    })
    .then(({ data }) => {
      tokens.save(account, data.access_token);

      const { search } = url.parse(req.url);

      log(`token retrieved, redirecting to ${APP_URL}${search}`);

      res.redirect(`${APP_URL}${search}`);
    })
    .catch((e) => {
      log(e);
    });
});

class ForbiddenError extends Error {
  constructor(msg) {
    super();

    this.name = "ForbiddenError";
    this.message = msg;
  }
}

app.use(cookieParser());

app.get("/current-user", (req, res) => {
  axios
    .get(
      `http://${account}.${API_DOMAIN}:3446/api/v1/users/${req.session.user}`,
      {
        code,
        client_id: CLIENT_KEY,
        client_secret: CLIENT_SECRET,
      }
    )
    .then(({ data }) => {
      tokens.save(account, data.access_token);

      const { search } = url.parse(req.url);

      log(`token retrieved, redirecting to ${APP_URL}${search}`);

      res.redirect(`${APP_URL}${search}`);
    })
    .catch((e) => {
      log(e);
    });
  // GET THE USER INFO FROM THE SESSION AND MAKE THE REQUEST

  log(req.cookies);
  res.send({ data: true });
});

app.get("/", (req, res, next) => {
  const { account, user, hmac } = req.query;

  if (!isValidHmac(req.url)) {
    log("Bad HMAC", hmac);
    return next(new ForbiddenError("Bad HMAC"));
  }

  // This Account has authenticated in the past
  if (tokens.get(account)) {
    log("token exists for ", account, tokens.get(account));

    const { search } = url.parse(req.url);

    // Save the user making the request

    if (req.session && account && req.session.account !== account) {
      clearSession(req);
      redirectToAuth(req, res);
      return;
    }

    console.log(req.url);

    req.session.user = user;

    // Save the account that the user is requesting to the session
    // Each user can have multiple accounts
    if (req.session.accounts) {
      if (!req.session.accounts.includes(account)) {
        req.session.accounts = req.session.accounts.concat(account);
      }
    } else {
      req.session.accounts = [account];
    }

    console.log(req.session);

    return res.redirect(`http://localhost:3001${search}`);
  }

  const redirectUri = `${APP_URL}/auth`;
  const scopes = "read_devices,write_devices";

  log("redirecting to /apps/oauth/authorize", account);

  res.redirect(
    `http://${account}.dev.local:3000/apps/oauth/authorize?client_id=${CLIENT_KEY}&redirect_uri=${redirectUri}&scope=${scopes}`
  );
});

app.use((err, req, res, next) => {
  // log the error; normally I'd use debug.js or similar, but for simplicity just console in this example
  console.error(err);

  // Check to see if we have already defined the status code
  if (err.statusCode) {
    // In production, you'd want to make sure that err.message is 'safe' for users to see, or else use a different value there
    return res
      .status(err.statusCode)
      .json({ code: err.code, message: err.message });
  }

  return res.status(500).json({
    code: err.name || "InternalServerError",
    message:
      err.message ||
      "An error has occurred, please contact the system administrator if it continues.",
  });
});

app.listen(3002, () => {
  log("app is running on 3002");
});
